# services:
#   # front:
#   #   container_name: front
#   #   restart: always
#   #   build:
#   #     context: .
#   #     dockerfile: ./images/front/Dockerfile
#   #     args:
#   #       APP_PATH: ${FRONT_PATH}
#   #   networks:
#   #     - only-classics-network
#   #   depends_on:
#   #     - database
#   #   volumes:
#   #     - ${FRONT_PATH}:/app
#   #   ports:
#   #     - ${PORT_FRONT}:8080
services:
  back:
    container_name: back
    restart: always
    build:
      context: .
      dockerfile: ./images/back/Dockerfile
      args:
        APP_PATH: ${BACK_PATH}
    networks:
      - only-classics-network
    depends_on:
      - database
    volumes:
      - ${BACK_PATH}:/app
    ports:
      - ${PORT_BACK}:3000

  front:
    container_name: front
    restart: always
    build:
      context: .
      dockerfile: ./images/front/Dockerfile
      args:
        APP_PATH: ${FRONT_PATH}
    networks:
      - only-classics-network
    depends_on:
      - database
    volumes:
      - ${FRONT_PATH}:/app
    ports:
      - ${PORT_FRONT}:8080

  database:
    container_name: database
    image: postgres
    restart: always
    ports:
      - ${DB_PORT}:5432
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    networks:
      - only-classics-network
    volumes:
      - only-classics-db:/var/lib/postgresql/data

volumes:
  only-classics-db: null

networks:
  only-classics-network:
    driver: bridge